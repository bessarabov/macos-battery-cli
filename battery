#!/usr/bin/perl

use strict;
use warnings FATAL => 'all';
use feature 'say';
use utf8;
use open qw(:std :utf8);

use Carp;
use JSON::PP;
use Term::ANSIColor qw(colored);

sub parse_battery_info {
    my ($info) = @_;

    my $result = {};

    if ( $info =~
    m/
        -InternalBattery-0
        \s+
        \(id=\d+\)
        \s+
        (\d+)%;
        \s+
        (charging|discharging|charged)
    /x ) {
        $result = {
            parsed => JSON::PP::true,
            percent => $1,
            status => $2,
        };
    } else {
        $result = {
            parsed => JSON::PP::false,
        };
    }

    $result->{raw} = $info;
    $result->{timestamp} = time();

    return $result;
}

sub output_info {
    my ($parsed) = @_;

    my $width = 25;

    my $charged = int($parsed->{percent} * $width/100);

    my $color = 'green';
    $color = 'yellow' if $parsed->{percent} < 50;
    $color = 'red' if $parsed->{percent} < 20;

    say '';
    say sprintf('%3d%%', $parsed->{percent}) . ' [' . colored('x'x$charged, $color) . '-'x($width-$charged) . ']';
    say '';

    return 1;
}

sub main {

    my $info = `pmset -g batt`;
    my $parsed = parse_battery_info($info);

    if (($ARGV[0] // '') eq '--json') {
        say encode_json $parsed;
    } else {

        croak "Can't parse battery info:\n$parsed->{raw}" if not $parsed->{parsed};

        output_info($parsed);

        say $info;
    }

}
main() if not caller;
1;
__END__
